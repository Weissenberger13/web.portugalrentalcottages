@using BootstrapVillas.Content.Classes
@using BootstrapVillas.Content.Classes.CurrencyConverter
@using BootstrapVillas.HTMLHelper
@using BootstrapVillas.Models




@{
    ViewBag.Title = "DatepickerModalWindow";

    @*Test if it's a PropertyResult, if not, use xxxxx other value*@
    Property theCurrentProperty = null;


    theCurrentProperty = (Property)Session["theCurrentProperty"];

    BookingCalendar BookingCalDates = ViewBag.BookingCalDates;

    List<DateTime?> lastBookingDays = new List<DateTime?>();

    if (theCurrentProperty != null)
    {
        lastBookingDays = Booking.GetLastDayOfAllFutureConfirmedBookings(theCurrentProperty.PropertyID);
    }




    long propertyID = 0;
    string legacyReference = "";

    if (theCurrentProperty != null)
    {
        propertyID = theCurrentProperty.PropertyID;
    }

    if (theCurrentProperty != null)
    {
        legacyReference = theCurrentProperty.LegacyReference;
    }

    List<PropertyTypeServicesChargeInstance> thePricings = new List<PropertyTypeServicesChargeInstance>();

    using (var db = new PortugalVillasContext())
    {
        try
        {
            Property prop = db.Properties.Where(x => x.PropertyID.Equals(propertyID)).First();

            thePricings = db.PropertyTypeServicesChargeInstances.Where(x => x.PropertyTypeID == prop.PropertyTypeID).ToList();
        }
        catch (Exception)
        {


        }

    }

    PropertyTypeServicesChargeInstance towelPriceDefault = new PropertyTypeServicesChargeInstance { ServicePriceGBP = 2.00M };
    var towelPrice = thePricings.Where(x => x.PropertyTypeServicesID.Equals(5)).DefaultIfEmpty(towelPriceDefault).First().ServicePriceGBP;

    PropertyTypeServicesChargeInstance heatingPriceDefault = new PropertyTypeServicesChargeInstance { ServicePriceGBP = 20.00M };
    var heatingPrice = thePricings.Where(x => x.PropertyTypeServicesID.Equals(3)).DefaultIfEmpty(heatingPriceDefault).First().ServicePriceGBP;

    PropertyTypeServicesChargeInstance swimHeatingPriceDefault = new PropertyTypeServicesChargeInstance { ServicePriceGBP = 20.00M };
    var swimHeatingPrice = thePricings.Where(x => x.PropertyTypeServicesID.Equals(6)).DefaultIfEmpty(swimHeatingPriceDefault).First().ServicePriceGBP;

    PropertyTypeServicesChargeInstance midVacationCleaningPriceDefault = new PropertyTypeServicesChargeInstance { ServicePriceGBP = 60.00M };
    var midVacationCleaningPrice = thePricings.Where(x => x.PropertyTypeServicesID.Equals(1)).DefaultIfEmpty(midVacationCleaningPriceDefault).First().ServicePriceGBP;

    PropertyTypeServicesChargeInstance lininSetPriceDefault = new PropertyTypeServicesChargeInstance { ServicePriceGBP = 6.50M };
    var lininSetPrice = thePricings.Where(x => x.PropertyTypeServicesID.Equals(7)).DefaultIfEmpty(lininSetPriceDefault).First().ServicePriceGBP;

}

<!-- Modal -->
<div id="myModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-header">
        <a class="close" data-dismiss="modal" aria-hidden="true"><i class="fa fa-fw fa-times"></i></a>
        <h3 id="myModalLabel"><i class="fa fa-fw fa-calendar"></i>Select Dates:</h3>
    </div>

    @{Html.BeginForm("AddPropertyBookingToSession", "PropertyView", FormMethod.Post, new { @name = "propertyBookingForm", @id = "propertyBookingForm" });}
    <div class="modal-body">
        <div class="modal-form">
            <div class="row-fluid" style="margin-bottom: 20px;">
                <input type="hidden" id="bookingModalPropertyID" name="bookingModalPropertyID" />
                <div class="span6">
                    <label for="bookingModalStartDatePickerProp"><i class="fa fa-fw fa-calendar"></i><css-decorator class="toTranslate">Start Date</css-decorator></label>
                    <input style="height: 35px;" type="text" class="span12" name="bookingModalStartDatePicker" id="bookingModalStartDatePickerProp" placeholder="dd/mm/yyyy" required /></div>
                <div class="span6">
                    <label for="bookingModalEndDatePickerProp"><i class="fa fa-fw fa-calendar"></i><css-decorator class="toTranslate">End Date</css-decorator></label>
                    <input style="height: 35px;" type="text" class="span12" name="bookingModalEndDatePicker" id="bookingModalEndDatePickerProp" placeholder="dd/mm/yyyy" required />
                </div>
            </div>


            <div class="row-fluid">
                <div class="span12">
                    <b><css-decorator class="toTranslate">Optional extra(s):</css-decorator></b>
                    <!-- checkbox 1 -->
                    <label for="towels">
                        <select class="input-small" id="towels" name="Booking_Towels">
                            <option>0</option>
                            <option>1</option>
                            <option>2</option>
                            <option>3</option>
                            <option>4</option>
                            <option>5</option>
                            <option>6</option>
                            <option>7</option>
                            <option>8</option>
                            <option>9</option>
                            <option>10</option>
                        </select>
                        <css-decorator class="toTranslate">Swim Towels</css-decorator><strong><css-decorator class="toTranslate">@Html.Currency()@Html.CurrencySymbol()@Html.CurrencyConvert(towelPrice, DependencyResolver.Current.GetService<ICurrencyConvert>()) p/week</css-decorator></strong>
                    </label>

                    <!-- checkbox 2 -->
                    <label for="Booking_MidVacationHeating">
                        <select class="input-small" id="Booking_MidVacationCleaning" name="Booking_MidVacationCleaning">
                            <option>0</option>
                            <option>1</option>
                            <option>2</option>
                            <option>3</option>
                            <option>4</option>
                            <option>5</option>
                            <option>6</option>
                            <option>7</option>
                            <option>8</option>
                            <option>9</option>
                            <option>10</option>
                        </select>
                        <css-decorator class="toTranslate"> Mid-vacation Cleaning</css-decorator> <strong><css-decorator class="toTranslate">@Html.Currency()@Html.CurrencySymbol()@Html.CurrencyConvert(midVacationCleaningPrice, DependencyResolver.Current.GetService<ICurrencyConvert>()) - per clean</css-decorator></strong>
                    </label>

                    <!-- checkbox 3 -->
                    <label for="Booking_SwimmingPoolHeating">
                        <select class="input-small" id="Booking_SwimmingPoolHeating" name="Booking_SwimmingPoolHeating">
                            <option>0</option>
                            <option>1</option>
                            <option>2</option>
                            <option>3</option>
                            <option>4</option>
                            <option>5</option>
                            <option>6</option>
                            <option>7</option>
                            <option>8</option>
                            <option>9</option>
                            <option>10</option>
                        </select>
                        <css-decorator class="toTranslate">  Swimming pool heating </css-decorator><strong><css-decorator class="toTranslate">@Html.Currency()@Html.CurrencySymbol()@Html.CurrencyConvert(swimHeatingPrice, DependencyResolver.Current.GetService<ICurrencyConvert>()) - per night</css-decorator></strong>
                    </label>

                    <label for="Booking_Heating">
                        <select class="input-small" id="Booking_Heating" name="Booking_Heating">
                            <option>0</option>
                            <option>1</option>
                            <option>2</option>
                            <option>3</option>
                            <option>4</option>
                            <option>5</option>
                            <option>6</option>
                            <option>7</option>
                            <option>8</option>
                            <option>9</option>
                            <option>10</option>
                        </select>
                        <css-decorator class="toTranslate"> Property Heating <strong><css-decorator class="toTranslate">@Html.Currency()@Html.CurrencySymbol()@Html.CurrencyConvert(heatingPrice, DependencyResolver.Current.GetService<ICurrencyConvert>()) - per day</css-decorator></strong>
                    </label>


                    <label for="Booking_ExtraLinen">
                        <select class="input-small" id="Booking_ExtraLinen" name="Booking_ExtraLinen">
                            <option>0</option>
                            <option>1</option>
                            <option>2</option>
                            <option>3</option>
                            <option>4</option>
                            <option>5</option>
                            <option>6</option>
                            <option>7</option>
                            <option>8</option>
                            <option>9</option>
                            <option>10</option>
                        </select>
                        <css-decorator class="toTranslate"> Extra set linen & towels <strong><css-decorator class="toTranslate">@Html.Currency()@Html.CurrencySymbol()@Html.CurrencyConvert(lininSetPrice, DependencyResolver.Current.GetService<ICurrencyConvert>()) - per set</css-decorator></strong>
                    </label>
                </div>
            </div>
        </div>
    </div>




    <!-- Submit buttons -->

    @*<input type="hidden" name="propertyID" id="modalHiddenPropertyID" value="@propertyID.ToString()" />
    <input type="hidden" name="prcReference" value="@legacyReference.ToString()" />*@

    <div class="modal-footer">
        <button class="btn" data-dismiss="modal" aria-hidden="true">Close</button>
        <button type="submit" class="btn btn-info" value="Confirm">Confirm</button>
    </div>
    @{Html.EndForm();}

</div>

<script type="text/javascript">

    $(function() {
        //var disabledDays = ["11-21-2012", "11-24-2012", "9-27-2011", "9-28-2011", "9-3-2011", "9-17-2011", "9-2-2011", "9-3-2011", "9-4-2011", "9-5-2011"];


        var highlightDaysGrey = [];
        var disabledDays = [];
        var highlightDays = [];
        var d = new Date();
        var day = d.getDate() - 1;


        @if (BookingCalDates != null)
        {
            if (BookingCalDates.bookingDates.Count > 0)
            {
                foreach (var abookingDate in BookingCalDates.bookingDates)
                {

                    string thePushString = "disabledDays.push('" + abookingDate.bookingDate.ToString("M-d-yyyy") + "');";
                    @Html.Raw(thePushString)
                }

                foreach (var lastBookingDay in lastBookingDays)
                {
                    string thePushString = "highlightDays.push('" + ((DateTime) lastBookingDay).ToString("M-d-yyyy") + "');";
                    @Html.Raw(thePushString)
                }

                foreach (var abookingDate in BookingCalDates.bookingDates)
                {

                    string thePushString = "highlightDaysGrey.push('" + abookingDate.bookingDate.ToString("M-d-yyyy") + "');";
                    @Html.Raw(thePushString)
                }

            }
        }

        function disableAllTheseDays(date) {


            var m = date.getMonth(), d = date.getDate(), y = date.getFullYear();

            if (highlightDays.length > 0) {
                for (i = 0; i < highlightDays.length; i++) {
                    if ($.inArray((m + 1) + '-' + d + '-' + y, highlightDays) != -1) {
                        //return [false];

                    
                        return [true, 'Highlight', ''];
                    }
                }
            }

            if (disabledDays.length > 0) {
                for (i = 0; i < disabledDays.length; i++) {
                    if ($.inArray((m + 1) + '-' + d + '-' + y, disabledDays) != -1) {
                        return [false];
                    }
                }
            }


            if (highlightDaysGrey.length > 0) {
                for (i = 0; i < highlightDaysGrey.length; i++) {
                    if ($.inArray((m + 1) + '-' + d + '-' + y, highlightDaysGrey) != -1) {
                        //return [false];

                        return [true, 'HighlightGrey', ''];
                    }
                }
            }

            return [true];
        }

  

    $("#bookingModalStartDatePickerProp").datepicker(
             {
                 //add JSON
                 dateFormat: 'dd-mm-yy',
                 beforeShowDay: disableAllTheseDays,
                 changeMonth: true,
                 changeYear: true
             });

    $("#bookingModalEndDatePickerProp").datepicker(
             {
                 //add JSON
                 dateFormat: 'dd-mm-yy',
                 beforeShowDay: disableAllTheseDays,
                 changeMonth: true,
                 changeYear: true
             });

    });
</script>